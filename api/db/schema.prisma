datasource DS {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// ----- INTERNAL -----

// Account for organization
model Organization {
  id                String             @id @default(cuid())
  // ----- General settings -----
  name              String
  slug              String             @unique
  stripeId          String
  // ----- Module toggles -----
  email             Boolean            @default(false)
  communications    Boolean            @default(false)
  payroll           Boolean            @default(false)
  hr                Boolean            @default(false)
  accounting        Boolean            @default(false)
  recruiting        Boolean            @default(false)
  crm               Boolean            @default(false)
  marketing         Boolean            @default(false)
  projectManagement Boolean            @default(false)
  helpdesk          Boolean            @default(false)
  taskTracking      Boolean            @default(false)
  // ----- Recruiting -----
  jobs              Job[]
  applicationFields ApplicationField[]
  // ----- Linked data -----
  employees         Employee[]
  contacts          Contact[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Internal employee
model Employee {
  id                String             @id @default(cuid())
  // ----- General info -----
  firstName         String
  lastName          String
  email             String             @unique
  title             String?
  // ----- Organization info -----
  organization      Organization       @relation(fields: [organizationId], references: [id])
  organizationId    String
  organizationRoles OrganizationRole[]
  department        Department?        @relation(fields: [departmentId], references: [id])
  departmentId      Int?
  supervisorId      String?
  supervisor        Employee?          @relation("SupervisorEmployees", fields: [supervisorId], references: [id])
  employees         Employee[]         @relation("SupervisorEmployees")
  // ----- HR info -----
  employeePay       EmployeePay?
  // ----- Helpdesk -----
  tickets           Ticket[]
  ticketMessage     TicketMessage[]
  // ----- Project management -----
  tasks             Task[]
  taskMessages      TaskMessage[]
  // ----- Linked data -----
  contacts          Contact[]
  contactNotes      ContactNote[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Internal Department
model Department {
  id        Int        @id @default(autoincrement())
  name      String
  employees Employee[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Salary
model EmployeePay {
  id         String          @id @default(cuid())
  amount     Int
  type       EmployeePayType
  employee   Employee        @relation(fields: [employeeId], references: [id])
  employeeId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Jobs and Recruiting
model Job {
  id             String             @id @default(cuid())
  title          String
  description    String
  fields         ApplicationField[]
  applications   Application[]
  fieldOrder     FieldOrder[]
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Application {
  id        String              @id @default(cuid())
  job       Job                 @relation(fields: [jobId], references: [id])
  jobId     String
  firstName String
  lastName  String
  email     String
  answers   ApplicationAnswer[]
  status    ApplicationStatus

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([jobId, email])
}

model ApplicationAnswer {
  id            String           @id @default(cuid())
  answer        String
  application   Application      @relation(fields: [applicationId], references: [id])
  applicationId String
  field         ApplicationField @relation(fields: [fieldId], references: [id])
  fieldId       String

  @@unique([applicationId, fieldId])
}

model FieldOrder {
  id      Int              @id @default(autoincrement())
  order   Int
  job     Job              @relation(fields: [jobId], references: [id])
  jobId   String
  field   ApplicationField @relation(fields: [fieldId], references: [id])
  fieldId String
}

model ApplicationField {
  id             String              @id @default(cuid())
  title          String
  description    String?
  type           FieldType
  organization   Organization        @relation(fields: [organizationId], references: [id])
  organizationId String
  jobs           Job[]
  answers        ApplicationAnswer[]
  fieldOrder     FieldOrder[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Customer, lead, etc.
model Contact {
  id             String          @id @default(cuid())
  // ----- General info -----
  firstName      String?
  lastName       String?
  email          String?
  phone          Int?
  company        Company?        @relation(fields: [companyId], references: [id])
  companyId      String?
  // ----- Internal information -----
  organization   Organization    @relation(fields: [organizationId], references: [id])
  organizationId String
  employee       Employee?       @relation(fields: [employeeId], references: [id])
  employeeId     String?
  note           ContactNote[]
  // Helpdesk
  tickets        Ticket[]
  ticketMessage  TicketMessage[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model ContactNote {
  id         Int       @id @default(autoincrement())
  message    String
  contact    Contact   @relation(fields: [contactId], references: [id])
  contactId  String
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?

  createdAt DateTime @default(now())
}

// Customer organization/company
model Company {
  id       String    @id @default(cuid())
  name     String
  website  String?
  phone    Int?
  contacts Contact[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// ----- HELPDESK -----

model Article {
  id         Int           @id @default(autoincrement())
  title      String
  content    String
  category   Category?     @relation(fields: [categoryId], references: [id])
  categoryId Int?
  status     ArticleStatus

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  articles Article[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Ticket {
  id          String          @id @default(cuid())
  title       String
  description String?
  contact     Contact?        @relation(fields: [contactId], references: [id])
  contactId   String?
  status      Status
  assigned    Employee        @relation(fields: [assignedId], references: [id])
  assignedId  String
  messages    TicketMessage[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model TicketMessage {
  id         Int       @id @default(autoincrement())
  message    String
  ticket     Ticket    @relation(fields: [taskId], references: [id])
  taskId     String
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?
  contact    Contact?  @relation(fields: [contactId], references: [id])
  contactId  String?

  createdAt DateTime @default(now())
}

// ----- PROJECT MANAGEMENT -----

model Project {
  id          String  @id @default(cuid())
  title       String
  description String?
  tasks       Task[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Task {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      Status
  assigned    Employee      @relation(fields: [assignedId], references: [id])
  assignedId  String
  project     Project?      @relation(fields: [projectId], references: [id])
  projectId   String?
  messages    TaskMessage[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model TaskMessage {
  id         Int       @id @default(autoincrement())
  message    String
  task       Task      @relation(fields: [taskId], references: [id])
  taskId     String
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?

  createdAt DateTime @default(now())
}

// ----- ENUMS -----

enum OrganizationRole {
  admin
  manager
  hr
  marketing
  sales
}

enum EmployeeStatus {
  applied
  prospect
  interviewing
  offered
  hired
  left
}

enum EmployeePayType {
  salary
  hourly
  contract
}

enum Status {
  open
  pending
  closed
  archived
}

enum FieldType {
  input
  textarea
  select
  radio
  checkbox
}

enum ArticleStatus {
  draft
  published
  archived
}

enum ApplicationStatus {
  submitted
  reviewed
  offered
  archived
}
